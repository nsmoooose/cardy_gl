How to transition between different states?
* Base style that defines a widget without any state set.
* Style for a state. A state can be something like:
-- hover
-- focus
-- selected
-- closing
* Each set property in state style can have three transition expressions set.
-- One for changing to the state.
-- Continous state (an animated button for example)
-- One for leaving the state.
* Each property has a option telling what operation it is in.
-- entering state
-- looping
-- leaving state
* Events when state reaches different operation.
-- Window is removed when fading out effect has been completed. User clicks
   close. We then changes state to "closing". When that state has finished
   its entering state (fade out). We then close the window.
-- Events called after the main loop rendering.

/* *********************************************************************************** */

Own mouse pointer.

Could be implemented using a rendering object applied last to the tree of nodes.

We also need to attach a mouse movement handler.

This can be used to hide the cursor.
glutSetCursor(GLUT_CURSOR_NONE);

/* *********************************************************************************** */

Have a angle on the camera like in flash cardy. This should be controllable by a
slidebar or some buttons in a control somewhere on the screen.

/* *********************************************************************************** */

Have some lighting applied.

/* *********************************************************************************** */

Random rotation of each card. +-2 degrees or something like that. Should be remembered
for each card between renderings. Sugest an array in the visual pile struct with some
predefined rotations when the pile is created.

/* *********************************************************************************** */

Fix rounded corners on cards. Can this be solved with some kind of beizer curve thingy?

/* *********************************************************************************** */

expression variables common to all widgets (rendering object as well?):
* first_frame
* total_time        Total time this object has been alive.
                    This should be a variable in the render_object structure.
					We can then create a special expression that has a pointer to
					this one.

expression functions:
* sin, cos
* ease_xxx_yy

/* *********************************************************************************** */

typedef enum {
		e_entering_state,
		e_continuous_state,
		e_leaving_state
} widget_operation;

/* Enqueu a state change. */
void widget_add_state(render_object *widget, const char *state);

/* Set the leaving state operation for a widget. */
void widget_remove_state(render_object *widget, const char *state);

/* Returns true if the widget or any subwidget has the state active in any transition. */
bool widget_state_active(render_object *widget, const char *state);

typedef struct {
		widget_operation op;
		float length;
		expression *exp;
} transition;

transition *t = widget_transition_create(e_entering_state, 3.0f, expression_parse(""));
widget_style_add_transition(style, "hover", "backcolor_red", t);

/* *********************************************************************************** */

/*
   Containers:

   A lot of nice glib functionality to use.
   http://library.gnome.org/devel/glib/stable/index.html

   Usefull reading about hashtables
   http://library.gnome.org/devel/glib/stable/glib-Hash-Tables.html

   Expandable arrays.
   http://library.gnome.org/devel/glib/stable/glib-Arrays.html

   Linked lists.
   http://library.gnome.org/devel/glib/stable/glib-Doubly-Linked-Lists.html
   http://library.gnome.org/devel/glib/stable/glib-Singly-Linked-Lists.html

   Do we wish to hide the fact that we are using this lib? Could create wrappers
   around the calls we are using.
*/

/* *********************************************************************************** */
